Reusable Functional Composition Patterns for Web Services.Developers write Web service composition programs interms of functionalities (e.g., "WebSearch") to postponechoosing which services of the same functionality to invoke(Google or Yahoo). We provide a higher level of abstractionthan this for higher reuse. We express high-level "patterns"(e.g., "SearchAndCollectData") as both objects that canbe "specialized" to particular applications ("SearchAnd-DownloadPapers"vs. "SearchAndAddBooksInCart") andobjects that are reusable in the construction of higher-levelones. Our approach lets developers write patterns interms of high-level functionalities (e.g., "CollectData") andlater decide on services to compose that have lower-levelfunctionalities (e.g., "DownloadPapers" or "addBooksIn-Carts").We describe our prototype and show an exampleof nested pattern specialization. We also discuss a reusetrade-off, showing that too much abstraction makes the patternless expressive. Rather, we suggest developers capturewhat must be guaranteed in every context of invocation, regardlessof the service selection.